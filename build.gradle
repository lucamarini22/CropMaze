plugins {
    id 'java'
    id 'pmd'
    id 'checkstyle'
    id "com.github.spotbugs" version "1.6.9"
}

import com.github.spotbugs.SpotBugsTask

group 'bbgmm'
version '0.0.1'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}

configurations {
// configuration that holds jars to include in the jar
    extraLibs
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'

    // SpotBugs
    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.7.1'
    compile 'com.github.spotbugs:spotbugs:3.1.6'

    compile 'com.google.apis:google-api-services-classroom:v1-rev302-1.25.0'

    implementation 'org.mapeditor:libtiled:1.0.2'

    implementation 'com.badlogicgames.gdx:gdx:1.9.9'

    implementation 'com.google.guava:guava-gwt:28.0-jre'

    extraLibs 'org.mapeditor:libtiled:1.0.2'


    configurations.compile.extendsFrom(configurations.extraLibs)
    
}

//PMD rules (More rigid rules)
pmd {
    toolVersion = '6.6.0'
    ignoreFailures = false
    sourceSets = [sourceSets.main]
    reportsDir = file("$project.buildDir/reports/pmd")
    ruleSetFiles = files("$project.rootDir/plugins/pmd.xml")
}

//FindBugs setup
spotbugs {
    toolVersion = '3.1.3'
}




task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Gradle Jar File Example',
                'Implementation-Version': version,
                'Main-Class': 'it.unibo.oop.bbgmm.CropMazeApp'
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }

        //configurations.extraLibs.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
}

tasks.withType(SpotBugsTask) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

//CheckStyle setup
checkstyle {
    toolVersion '8.10.1'
    configFile file("$project.rootDir/plugins/style.xml")
}

checkstyleMain {
    source ='src/main/java'
}

checkstyleTest {
    source ='src/test/java'
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled = false
        html.enabled = true
        //html.stylesheet resources.text.fromFile("$project.rootDir/plugins/checkstyle-css.xsl")
    }
}
